name: iOS AltServer IPA

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags:
      - 'build-*'

jobs:
  build-ipa:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show Xcode
        shell: bash
        run: |
          xcodebuild -version
          xcodebuild -showsdks

      - name: Detect Xcode container
        shell: bash
        run: |
          set -euo pipefail
          WS=$(find . -maxdepth 3 -name "*.xcworkspace" -print -quit || true)
          PJ=$(find . -maxdepth 3 -name "*.xcodeproj"    -print -quit || true)
          if [[ -n "$WS" ]]; then
            CT="workspace"; CO="$WS"
          elif [[ -n "$PJ" ]]; then
            CT="project";   CO="$PJ"
          else
            echo "No .xcworkspace or .xcodeproj found" >&2
            exit 1
          fi
          echo "CONTAINER=$CO" >> "$GITHUB_ENV"
          echo "CONTAINER_TYPE=$CT" >> "$GITHUB_ENV"
          echo "Detected container: $CT -> $CO"

      - name: List schemes
        shell: bash
        run: |
          if [[ "${CONTAINER_TYPE}" == "workspace" ]]; then
            xcodebuild -workspace "${CONTAINER}" -list
          else
            xcodebuild -project  "${CONTAINER}" -list
          fi

      - name: Build & Archive (unsigned for AltServer)
        env:
          SCHEME: ExpenseTracker
        shell: bash
        run: |
          set -euo pipefail
          ARCHIVE_PATH="$PWD/build/ExpenseTracker.xcarchive"
          
          echo "Building with scheme: $SCHEME"
          echo "Container type: ${CONTAINER_TYPE}"
          echo "Container: ${CONTAINER}"
          
          # Use standard archive approach with no code signing
          if [[ "${CONTAINER_TYPE}" == "workspace" ]]; then
            xcodebuild \
              -workspace "${CONTAINER}" \
              -scheme "$SCHEME" \
              -configuration Release \
              -destination 'generic/platform=iOS' \
              -archivePath "$ARCHIVE_PATH" \
              archive \
              CODE_SIGNING_ALLOWED=NO \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGN_IDENTITY="" \
              DEVELOPMENT_TEAM="" \
              SKIP_INSTALL=NO \
              ONLY_ACTIVE_ARCH=NO \
              VALIDATE_PRODUCT=NO \
              ENABLE_BITCODE=NO \
              COMPILER_INDEX_STORE_ENABLE=NO
          else
            xcodebuild \
              -project "${CONTAINER}" \
              -scheme "$SCHEME" \
              -configuration Release \
              -destination 'generic/platform=iOS' \
              -archivePath "$ARCHIVE_PATH" \
              archive \
              CODE_SIGNING_ALLOWED=NO \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGN_IDENTITY="" \
              DEVELOPMENT_TEAM="" \
              SKIP_INSTALL=NO \
              ONLY_ACTIVE_ARCH=NO \
              VALIDATE_PRODUCT=NO \
              ENABLE_BITCODE=NO \
              COMPILER_INDEX_STORE_ENABLE=NO
          fi
          
          echo "Build completed. Checking archive contents..."
          ls -la "$ARCHIVE_PATH" || echo "Archive not found"

      - name: Create IPA
        shell: bash
        run: |
          set -euo pipefail
          ARCHIVE_PATH="$PWD/build/ExpenseTracker.xcarchive"
          
          # Create a temporary directory for the IPA contents
          mkdir -p Payload
          
          # Find the .app in the archive
          APP_PATH=$(find "$ARCHIVE_PATH/Products/Applications" -type d -name "*.app" -print -quit)
          if [[ -z "$APP_PATH" ]]; then
            echo "ERROR: No .app found in archive" >&2
            ls -la "$ARCHIVE_PATH/Products/Applications" || true
            exit 1
          fi
          
          echo "Found app at: $APP_PATH"
          echo "App contents:"
          ls -la "$APP_PATH"
          
          # Copy the .app to the Payload directory
          cp -R "${APP_PATH}" Payload/
          
          # Create the IPA file
          zip -r ExpenseTracker.ipa Payload
          
          # Verify the IPA was created
          if [[ ! -f "ExpenseTracker.ipa" ]]; then
            echo "ERROR: Failed to create IPA file" >&2
            exit 1
          fi
          
          # Clean up
          rm -rf Payload
          
          echo "âœ… Created IPA: ExpenseTracker.ipa"
          ls -lah ExpenseTracker.ipa

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ExpenseTracker-ipa
          path: ExpenseTracker.ipa
