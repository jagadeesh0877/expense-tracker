name: iOS AltServer IPA

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags:
      - 'build-*'

jobs:
  build-ipa:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show Xcode
        shell: bash
        run: |
          xcodebuild -version
          xcodebuild -showsdks

      - name: Detect Xcode container
        shell: bash
        run: |
          set -euo pipefail
          WS=$(find . -maxdepth 3 -name "*.xcworkspace" -print -quit || true)
          PJ=$(find . -maxdepth 3 -name "*.xcodeproj"    -print -quit || true)
          if [[ -n "$WS" ]]; then
            CT="workspace"; CO="$WS"
          elif [[ -n "$PJ" ]]; then
            CT="project";   CO="$PJ"
          else
            echo "No .xcworkspace or .xcodeproj found" >&2
            exit 1
          fi
          echo "CONTAINER=$CO" >> "$GITHUB_ENV"
          echo "CONTAINER_TYPE=$CT" >> "$GITHUB_ENV"
          echo "Detected container: $CT -> $CO"

      - name: List schemes (ensure your scheme is Shared)
        shell: bash
        run: |
          if [[ "${CONTAINER_TYPE}" == "workspace" ]]; then
            xcodebuild -workspace "${CONTAINER}" -list
          else
            xcodebuild -project  "${CONTAINER}" -list
          fi

      - name: Build & Archive (unsigned for AltServer)
        env:
          SCHEME: ExpenseTracker   # change if your shared scheme name differs
        shell: bash
        run: |
          set -euo pipefail
          ARCHIVE_PATH="$PWD/build/ExpenseTracker.xcarchive"
          if [[ "${CONTAINER_TYPE}" == "workspace" ]]; then
            xcodebuild \
              -workspace "${CONTAINER}" \
              -scheme "$SCHEME" \
              -configuration Release \
              -destination 'generic/platform=iOS' \
              -archivePath "$ARCHIVE_PATH" \
              archive \
              CODE_SIGNING_ALLOWED=NO \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGN_IDENTITY="" \
              DEVELOPMENT_TEAM="" \
              SKIP_INSTALL=NO
          else
            xcodebuild \
              -project "${CONTAINER}" \
              -scheme "$SCHEME" \
              -configuration Release \
              -destination 'generic/platform=iOS' \
              -archivePath "$ARCHIVE_PATH" \
              archive \
              CODE_SIGNING_ALLOWED=NO \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGN_IDENTITY="" \
              DEVELOPMENT_TEAM="" \
              SKIP_INSTALL=NO
          fi

      - name: Verify Archive Contents
        shell: bash
        run: |
          set -euo pipefail
          ARCHIVE_PATH="$PWD/build/ExpenseTracker.xcarchive"
          
          echo "Archive created at: $ARCHIVE_PATH"
          ls -la "$ARCHIVE_PATH"
          
          echo "Archive contents:"
          find "$ARCHIVE_PATH" -type f -name "*.app" -exec ls -la {} \;
          
          echo "Products directory:"
          ls -la "$ARCHIVE_PATH/Products/Applications" || echo "Products directory not found"
          
          echo "Info.plist contents:"
          find "$ARCHIVE_PATH" -name "Info.plist" -exec cat {} \; | head -20 || echo "Info.plist not found"

      - name: Create IPA
        shell: bash
        run: |
          set -euo pipefail
          # Create a temporary directory for the IPA contents
          mkdir -p Payload
          
          # Find the .app in the archive
          APP_PATH=$(find "$PWD/build/ExpenseTracker.xcarchive/Products/Applications" -type d -name "*.app" -print -quit)
          if [[ -z "$APP_PATH" ]]; then
            echo "No .app found in archive" >&2
            ls -la "$PWD/build/ExpenseTracker.xcarchive/Products/Applications" || true
            exit 74
          fi
          
          echo "Found app at: $APP_PATH"
          
          # Verify the executable exists
          EXECUTABLE_NAME=$(basename "$APP_PATH" .app)
          EXECUTABLE_PATH="$APP_PATH/$EXECUTABLE_NAME"
          if [[ ! -f "$EXECUTABLE_PATH" ]]; then
            echo "Executable not found at: $EXECUTABLE_PATH" >&2
            ls -la "$APP_PATH" || true
            exit 75
          fi
          
          echo "Executable found at: $EXECUTABLE_PATH"
          
          # Copy the .app to the Payload directory
          cp -R "${APP_PATH}" Payload/
          
          # Verify the copy was successful
          if [[ ! -d "Payload/$EXECUTABLE_NAME.app" ]]; then
            echo "Failed to copy app to Payload" >&2
            exit 76
          fi
          
          # Create the IPA file
          zip -r ExpenseTracker.ipa Payload
          
          # Verify the IPA was created
          if [[ ! -f "ExpenseTracker.ipa" ]]; then
            echo "Failed to create IPA file" >&2
            exit 77
          fi
          
          # Clean up
          rm -rf Payload
          
          echo "Created IPA: ExpenseTracker.ipa"
          ls -lah ExpenseTracker.ipa
          
          # Verify IPA contents
          unzip -l ExpenseTracker.ipa | head -20

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ExpenseTracker-ipa
          path: ExpenseTracker.ipa
